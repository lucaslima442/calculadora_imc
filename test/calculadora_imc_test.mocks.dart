// Mocks generated by Mockito 5.4.4 from annotations
// in calculadora_imc/test/calculadora_imc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:convert' as _i4;
import 'dart:io' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

import 'calculadora_imc_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamSubscription_0<T> extends _i1.SmartFake
    implements _i2.StreamSubscription<T> {
  _FakeStreamSubscription_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T> extends _i1.SmartFake implements _i2.Future<T> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockStdin].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockStdin extends _i1.Mock implements _i3.MockStdin {
  MockMockStdin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get echoMode => (super.noSuchMethod(
        Invocation.getter(#echoMode),
        returnValue: false,
      ) as bool);

  @override
  set echoMode(bool? echoMode) => super.noSuchMethod(
        Invocation.setter(
          #echoMode,
          echoMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get echoNewlineMode => (super.noSuchMethod(
        Invocation.getter(#echoNewlineMode),
        returnValue: false,
      ) as bool);

  @override
  set echoNewlineMode(bool? echoNewlineMode) => super.noSuchMethod(
        Invocation.setter(
          #echoNewlineMode,
          echoNewlineMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get lineMode => (super.noSuchMethod(
        Invocation.getter(#lineMode),
        returnValue: false,
      ) as bool);

  @override
  set lineMode(bool? lineMode) => super.noSuchMethod(
        Invocation.setter(
          #lineMode,
          lineMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get supportsAnsiEscapes => (super.noSuchMethod(
        Invocation.getter(#supportsAnsiEscapes),
        returnValue: false,
      ) as bool);

  @override
  bool get hasTerminal => (super.noSuchMethod(
        Invocation.getter(#hasTerminal),
        returnValue: false,
      ) as bool);

  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
      ) as bool);

  @override
  _i2.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  _i2.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<List<int>> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);

  @override
  _i2.Future<List<int>> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);

  @override
  _i2.Future<List<int>> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);

  @override
  String? readLineSync({
    _i4.Encoding? encoding = const _i5.SystemEncoding(),
    bool? retainNewlines = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #readLineSync,
        [],
        {
          #encoding: encoding,
          #retainNewlines: retainNewlines,
        },
      )) as String?);

  @override
  int readByteSync() => (super.noSuchMethod(
        Invocation.method(
          #readByteSync,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i2.StreamSubscription<List<int>> listen(
    void Function(List<int>)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_0<List<int>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i2.StreamSubscription<List<int>>);

  @override
  _i2.Stream<List<int>> asBroadcastStream({
    void Function(_i2.StreamSubscription<List<int>>)? onListen,
    void Function(_i2.StreamSubscription<List<int>>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);

  @override
  _i2.Stream<List<int>> where(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);

  @override
  _i2.Stream<S> map<S>(S Function(List<int>)? convert) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i2.Stream<S>.empty(),
      ) as _i2.Stream<S>);

  @override
  _i2.Stream<E> asyncMap<E>(_i2.FutureOr<E> Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i2.Stream<E>.empty(),
      ) as _i2.Stream<E>);

  @override
  _i2.Stream<E> asyncExpand<E>(_i2.Stream<E>? Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i2.Stream<E>.empty(),
      ) as _i2.Stream<E>);

  @override
  _i2.Stream<List<int>> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);

  @override
  _i2.Stream<S> expand<S>(Iterable<S> Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i2.Stream<S>.empty(),
      ) as _i2.Stream<S>);

  @override
  _i2.Future<dynamic> pipe(_i2.StreamConsumer<List<int>>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);

  @override
  _i2.Stream<S> transform<S>(
          _i2.StreamTransformer<List<int>, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i2.Stream<S>.empty(),
      ) as _i2.Stream<S>);

  @override
  _i2.Future<List<int>> reduce(
          List<int> Function(
            List<int>,
            List<int>,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);

  @override
  _i2.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      List<int>,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i2.Future<S>.value(v),
            ) ??
            _FakeFuture_1<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i2.Future<S>);

  @override
  _i2.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i2.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
      ) as _i2.Future<String>);

  @override
  _i2.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<void> forEach(void Function(List<int>)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> every(bool Function(List<int>)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<bool> any(bool Function(List<int>)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i2.Stream<R>.empty(),
      ) as _i2.Stream<R>);

  @override
  _i2.Future<List<List<int>>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i2.Future<List<List<int>>>.value(<List<int>>[]),
      ) as _i2.Future<List<List<int>>>);

  @override
  _i2.Future<Set<List<int>>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i2.Future<Set<List<int>>>.value(<List<int>>{}),
      ) as _i2.Future<Set<List<int>>>);

  @override
  _i2.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i2.Future<E>.value(v),
            ) ??
            _FakeFuture_1<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i2.Future<E>);

  @override
  _i2.Stream<List<int>> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);

  @override
  _i2.Stream<List<int>> takeWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);

  @override
  _i2.Stream<List<int>> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);

  @override
  _i2.Stream<List<int>> skipWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);

  @override
  _i2.Stream<List<int>> distinct(
          [bool Function(
            List<int>,
            List<int>,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);

  @override
  _i2.Future<List<int>> firstWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);

  @override
  _i2.Future<List<int>> lastWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);

  @override
  _i2.Future<List<int>> singleWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);

  @override
  _i2.Future<List<int>> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i2.Future<List<int>>.value(<int>[]),
      ) as _i2.Future<List<int>>);

  @override
  _i2.Stream<List<int>> timeout(
    Duration? timeLimit, {
    void Function(_i2.EventSink<List<int>>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);
}
